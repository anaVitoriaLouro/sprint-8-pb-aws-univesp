service: vision
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  httpApi:
    cors: true
  # The below creates the necessary permissions to access S3, Rekognition, and ApiGateway actions
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "rekognition:*"
          Resource: "*"
        - Effect: "Allow"
          Action: 
            - "execute-api:*"
          Resource: "*"

# This creates a public S3 bucket from the deploy
resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: sprint-8-vision
    MyS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MyS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: s3:PutObject
              Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*


    # This creates a role for the lambda function on routes /v1/vision & /v2/vision
    MyLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: MyLambdaFunctionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess

        Policies:
        - PolicyName: RekognitionAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectFaces
                  - rekognition:DetectLabels
                Resource: "*"

# This creates all five routes of the project
functions:
  health:
    handler: handler.health
    events:
      - httpApi:
          path: /
          method: get
  v1Description:
    handler: handler.v1_description
    events:
      - httpApi:
          path: /v1
          method: get
  v2Description:
    handler: handler.v2_description
    events:
      - httpApi:
          path: /v2
          method: get
  v1LabelFunction:
    handler: handler.v1Label
    events:
      - httpApi:
          path: /v1/vision
          method: post
    role: MyLambdaFunctionRole
    logRetentionInDays: 7
  v2EmotionFunction:
    handler: handler.v2Emotion
    events:
      - httpApi:
          path: /v2/vision
          method: post
    role: MyLambdaFunctionRole
    logRetentionInDays: 7
